trigger: none
pr:
  branches:
    exclude:
      - '*'  # Allow PR builds from any branch, including forks

pool:
  vmImage: 'macos-14'

variables:
  - group: s3-credentials

workspace:
  clean: all

steps:

- script: |
    echo "##[group]Dotnet Tool Restore"
    cd $(Build.SourcesDirectory)/
    dotnet tool restore
  displayName: 'Dotnet Tool Restore'

- task: CmdLine@2
  displayName: 'Install Latest .NET MAUI Workload'
  inputs:
    script: 'dotnet workload install maui maui-android maui-windows maui-ios maui-maccatalyst maui-tizen android ios maccatalyst macos mobile-librarybuilder'

- script: |
    echo "##[group]Build MSBuild Tasks"
    cd $(Build.SourcesDirectory)/
    dotnet cake --target=dotnet-buildtasks
    echo "##[endgroup]"
  displayName: 'Build MSBuild Tasks'
  continueOnError: 'True'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Compatibility/Core/tests/Compatibility.UnitTests/
    dotnet build
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Controls/tests/Core.UnitTests/
    dotnet build
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Controls/tests/Core.Design.UnitTests/
    dotnet build 
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Controls/tests/Xaml.UnitTests/
    dotnet build 
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Core/tests/UnitTests/
    dotnet build 
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Graphics/tests/Graphics.Tests/
    dotnet build
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/Essentials/test/UnitTests/
    dotnet build
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Build Maui Solution"
    cd $(Build.SourcesDirectory)/src/SingleProject/Resizetizer/test/UnitTests/
    dotnet build
    echo "##[endgroup]"
  displayName: 'Build UnitTest Projects'

- script: |
    echo "##[group]Perform Unit Test"
    cd $(Build.SourcesDirectory)/
    dotnet cake --target=dotnet-test --verbosity=diagnostic --workloads=global
    echo "##[endgroup]"
  displayName: 'Perform Unit Test'

- task: CmdLine@2
  displayName: 'HTML Conversion'
  inputs:
    script: 'dotnet pwsh $(Build.SourcesDirectory)/eng/scripts/ParseTrx.ps1 -inputDirectory "$(Agent.BuildDirectory)/a/test-results"'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Test Results Folder'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/test-results/results'
    ArtifactName: 'artifacts'

- script: |
    echo "Setting AWS environment variables..."
    export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
    export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
    export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)

    echo "Generating index.html for the list of HTML files..."

    result_dir=$(Build.ArtifactStagingDirectory)/test-results/results
    base_url="https://testresults.syncfusion.com/maui/$(Build.SourceBranchName)/unittest/"
    template_file=$(Agent.BuildDirectory)/s/eng/pipelines/syncfusion/Indextemplates/index.html
    overall_table_template_file=$(Agent.BuildDirectory)/s/eng/pipelines/syncfusion/Indextemplates/taskid/index.html
    report_table_template_file=$(Agent.BuildDirectory)/s/eng/pipelines/syncfusion/Indextemplates/taskid/unittest/index.html

    echo "Result Directory: $result_dir"
    echo "Template File: report_table_template_file"

    echo "Generating index.html for the list of HTML files..."
    pwsh -File "$(Agent.BuildDirectory)/s/eng/scripts/generatetable.ps1" -resultDir "$result_dir" -baseUrl "$base_url" -templateFile "$report_table_template_file"

    echo "Uploading HTML files to S3..."
    for file in $result_dir/*.html; do
      if [ -f "$file" ]; then
        echo "Uploading $file to s3://syncfusion-testresults/maui/$(Build.SourceBranchName)/unittest/"
        aws s3 cp "$file" s3://syncfusion-testresults/maui/$(Build.SourceBranchName)/unittest/
      else
        echo "No HTML files found in $result_dir/"
        exit 1
      fi
    done

    # Verify the upload by downloading and printing the content from S3
    aws s3 cp "s3://syncfusion-testresults/maui/$(Build.SourceBranchName)/unittest/index.html" - | cat

    echo "Generating overall counts from test reports for S3 for s3://syncfusion-testresults/maui/$(Build.SourceBranchName)/index.html"
    pwsh -File "$(Agent.BuildDirectory)/s/eng/scripts/generatetable.ps1" -resultDir "$result_dir" -baseUrl "$base_url" -templateFile "$overall_table_template_file" -totalCounts "istotal"

    echo "Uploading the generated index.html back to s3://syncfusion-testresults/maui/$(Build.SourceBranchName)/..."
    aws s3 cp "$result_dir/index.html" s3://syncfusion-testresults/maui/$(Build.SourceBranchName)/

    # Generating updated directory from S3 for s3://syncfusion-testresults/maui/
    echo "Generating updated directory list HTML for s3://syncfusion-testresults/maui/..."

    base_url="https://testresults.syncfusion.com/maui/"

    echo "Fetching list of directories in s3://syncfusion-testresults/maui/..."
    directories=$(aws s3 ls s3://syncfusion-testresults/maui/ | grep PRE | awk '{print $2}')

    # Create the list of directories for main bucket
    dir_list=""
    for dir in $directories; do
      dir_name=$(basename "$dir" /)
      dir_url="${base_url}${dir_name}/"
      dir_list="${dir_list}<li><a href=\"$dir_url\">$dir_name</a></li>"
      echo "dir_list: $dir_list"
    done

    echo "Generated directory list: $dir_list"

    # Insert the list into the template using awk for main bucket
    modified_content=$(awk -v file_list="$dir_list" '
    BEGIN { found=0 }
    /<ul>/ && !found { print; print "<ul>" file_list "</ul>"; found=1; next }
    /<\/ul>/ && found { found=0; next }
    { if (!found) print }
    ' "$template_file")

    # Upload the modified content directly to S3 for main bucket
    echo "$modified_content" | aws s3 cp - "s3://syncfusion-testresults/maui/index.html" --content-type "text/html"

    echo "index.html generated and uploaded for s3://syncfusion-testresults/maui/"
  displayName: 'Generate and Upload Dir-HTML File'

  continueOnError: true
